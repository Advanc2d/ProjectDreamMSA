
server:
  port: 8002

spring:
  application:
    name: order-service
  profiles:
   active: dev
  config:              # gradle에 config 추가.
   import: optional:configserver:http://localhost:8888  # config 서버 위치
  devtools:
     livereload:  #﻿ html, css, js 수정 시 새로고침 없이 바로 적용가능
       enabled: true
     restart:   # 재시작시 완전히 꺼졌다 다시키는 것보다 훨씬 빠르게 해줌.
      enabled: true
# actuator를 이용하여 서버 재시작 없이 변경내용 반영 가능하게 함.
management:
  endpoints:
   web:
    exposure:
     include: refresh, health, beans #refresh:설정 정보 갱신
     
##kafka 설정
#kafka:
#  server_endpoint: 127.0.0.1:9092
#  topic_name: my-topic
#  group_id: consumer-loan-service
      
# ------------------------------------------------------외부------------------------------------------
## db 설정 
#spring:         
#  datasource:
#    driver-class-name: com.mysql.cj.jdbc.Driver
#    url: jdbc:mysql://192.168.1.51:3306/dream?serverTimezone=UTC&characterEncoding=UTF-8
#    username: dream
#    password: 1234
#---
## security 설정
#spring:       
#  security:
#    oauth2:
#      resourceserver:
#        jwt:
#          jwk-set-uri: http://192.168.1.54:8080/auth/realms/MSA/protocol/openid-connect/certs
#---          
##keycloak 설정          
#keycloak:
#  realm: MSA
#  bearer-only: true
#  ssl-required: external
#  resource: spring-gateway-client
#  auth-server-url: http://192.168.1.54:8080/auth
#  credentials:
#    secret: WEcACPUTWPfuhPrEz3bBaHcl7OLLmYX1
#---
## mybatis 연동 설정   
#mybatis:
#  mapper-locations: classpath*:mapper/*.xml
#
##kafka 설정
#kafka:
#  server_endpoint: 127.0.0.1:9092
#  topic_name: my-topic
#  bootstrap-servers: 127.0.0.1:9092 #도커 ip주소 입력
#  
## 유레카 클라이언트 설정            
#eureka:
#  instance:
#    instance-id: loan-microservice-instance # eureka에 등록되는 id 값
#  client:
#    register-with-eureka: true  # 유레카에 등록할지 여부.
#    fetch-registry: true  # 유레카에서 조회할지 여부
#    service-url:
#      defaultZone: http://localhost:8761/eureka # 서비스를 등록할 서버 주소를 지정
