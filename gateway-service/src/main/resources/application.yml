spring:
  application:
   name: gateway-service  # git에 있는 확장자 제외한 설정파일 이름.
  profiles:
   active: dev
  config:              # gradle에 config 추가.
   import: optional:configserver:http://localhost:8888  # config 서버 위치
#   import: optional:configserver:http://192.168.1.49:8888  # config 도커로 할때 버전   
# config 서버 위치# actuator를 이용하여 서버 재시작 없이 변경내용 반영 가능하게 함.
management:
  endpoints:
   web:
    exposure:
        include: "*"
  endpoint:
    shutdown:
      enabled: true
    health:
      show-details: always # actuator에서 디테일한 정보들을 확인하기 위해 설정
  health:
    circuitbreakers:
      enabled: true # actuator를 통해 circuitbraker 상태를 확인하기 위해 설정

#server:
#  port: 8000
  

#---
#spring:   
#  cloud:
#   gateway:
#      filter:
#        circuit-breaker:
#          enabled: true
#      httpclient:
#        connect-timeout: 10000
#        response-timeout: 10s
#      default-filters:
#        -  TokenRelay
#      routes:          
#        - id: menu-service
#          uri: lb://MENU-SERVICE # uri: http://localhost:8001 # 포워딩 할 주소, http://localhost:8000/menu 로 들어오면 http://localhost:8001로 포워딩
#          predicates:
#            - Path=/menu/** # 해당 gateway 서버의 /menu/**로 들어오는 menu-service로 인식하겠다는 조건
#          filters:
#            - RewritePath=/menu/?(?<segment>.*), /$\{segment}
#            - name: CircuitBreaker
#              args:
#                  name: menuCircuitBreaker
#                  fallbackUri: forward:/fallback/failure
#              
#        - id: product-service
#          uri: lb://PRODUCT-SERVICE 
#          predicates:
#            - Path=/product/** 
#          filters:
#            - RewritePath=/product/?(?<segment>.*), /$\{segment}     
#            - name: CircuitBreaker
#              args:
#                  name: productCircuitBreaker
#                  fallbackUri: forward:/fallback/failure                 
#              
#        - id: manage-service
#          uri: lb://MANAGE-SERVICE 
#          predicates:
#            - Path=/manage/** 
#          filters:
#            - RewritePath=/manage/?(?<segment>.*), /$\{segment}
#            - name: CircuitBreaker
#              args:
#                  name: manageCircuitBreaker
#                  fallbackUri: forward:/fallback/failure  
#        - id: loan-service
#          uri: lb://LOAN-SERVICE 
#          predicates:
#            - Path=/loan/** 
#          filters:
#            - RewritePath=/loan/?(?<segment>.*), /$\{segment} 
#            - name: CircuitBreaker
#              args:
#                  name: loanCircuitBreaker
#                  fallbackUri: forward:/fallback/failure
#                                 
#        - id: list-service
#          uri: lb://LIST-SERVICE 
#          predicates:
#            - Path=/list/** 
#          filters:
#            - RewritePath=/list/?(?<segment>.*), /$\{segment}  
#            - name: CircuitBreaker
#              args:
#                  name: listCircuitBreaker
#                  fallbackUri: forward:/fallback/failure
#            
#        - id: save-service
#          uri: lb://SAVE-SERVICE 
#          predicates:
#            - Path=/save/** 
#          filters:
#            - RewritePath=/save/?(?<segment>.*), /$\{segment}
#            - name: CircuitBreaker
#              args:
#                  name: saveCircuitBreaker
#                  fallbackUri: forward:/fallback/faliure
#                                        
#        - id: status-service
#          uri: lb://STATUS-SERVICE 
#          predicates:
#            - Path=/status/** 
#          filters:
#            - RewritePath=/status/?(?<segment>.*), /$\{segment}
#            - name: CircuitBreaker
#              args:
#                  name: statusCircuitBreaker
#                  fallbackUri: forward:/fallback/faliure
#
#        - id: error-service-fallback
#          uri: lb://ERROR-SERVICE-FALLBACK # uri: http://localhost:8001 # 포워딩 할 주소, http://localhost:8000/menu 로 들어오면 http://localhost:8001로 포워딩
#          predicates:
#            - Path=/fallback/** # 해당 gateway 서버의 /menu/**로 들어오는 menu-service로 인식하겠다는 조건
#          filters:
#            - RewritePath=/fallback/?(?<segment>.*), /$\{segment}
#            - name: CircuitBreaker
#              args:
#                  name: errorCircuitBreaker
#                  fallbackUri: forward:/fallback/faliure  
#
### security 설정
##spring:
#  security:
#    oauth2:
#      client:
#        provider:
#          keycloak:
#            issuer-uri: http://192.168.1.54:8080/auth/realms/MSA
#            user-name-attribute: preferred_username
#        registration:
#          keycloak:
##            provider: keycloak
#            client-id: spring-gateway-client
#            client-secret: WEcACPUTWPfuhPrEz3bBaHcl7OLLmYX1
#            authorization-grant-type: authorization_code
#            redirect-uri: '{baseUrl}/login/oauth2/code/keycloak'        
#               
##keycloak 설정          
#keycloak:
#  realm: MSA
#  resource: spring-gateway-client
#  auth-server-url: http://192.168.1.54:8080/auth
# 
##서킷브레이커    
#resilience4j:
#  circuitbreaker:
#    configs:
#      default:
#        registerHealthIndicator: true # actuator를 통해 circuitbraker 상태를 확인하기 위해 설정
#        minimumNumberOfCalls: 5 # Circuit Breaker가 에러 비율 또 slow call 비율을 계산하기 전에 요구되는 최소한의 요청 수
#        failureRateThreshold: 50  # 에러 비율 (퍼센트)로 해당 값 이상으로 에러 발생시 서킷이 Open 된다.
#        waitDurationInOpenState: 30s  # 서킷의 상태가 Open에서 Half-open으로 변경되기 전에 Circuit Breaker가 기다리는 시간
#    instances:
#      menuCircuitBreaker:
#        baseConfig: default
#      manageCircuitBreaker:
#        baseConfig: default
#      productCircuitBreaker:
#        baseConfig: default
#      loanCircuitBreaker:
#        baseConfig: default
#      saveCircuitBreaker:
#        baseConfig: default
#      listCircuitBreaker:
#        baseConfig: default
#      statusCircuitBreaker:
#        baseConfig: default
#      errorCircuitBreaker:
#        base-config: default
#        
## 유레카 클라이언트 설정
#eureka:
#  client:
#    register-with-eureka: true  # 유레카에 등록할지 여부.
#    fetch-registry: true  # 유레카에서 조회할지 여부
#    service-url:
#      defaultZone: http://localhost:8761/eureka # 서비스를 등록할 서버 주소를 지정
#  instance:
#    instance-id: gateway-microservice-instance # eureka에 등록되는 id 값
#
#  